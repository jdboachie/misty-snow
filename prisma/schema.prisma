generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  queries       Query[]
  connections   Connection[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Connection {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  username       String
  hostname       String
  password       String
  port           Int
  protocol       String
  databaseName   String
  isConnected    Boolean  @default(true)
  ssl            Boolean? @default(false)
  relatedQueries Query[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("connections")
}

model Query {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  connectionId String   @map("connection_id")
  name         String   @db.VarChar(255)
  content      String?  @db.Text
  emojiUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedConnection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("queries")
}
